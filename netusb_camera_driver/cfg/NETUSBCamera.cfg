#!/usr/bin/env python

PKG="netusb_camera_driver"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

class SensorLevels:
    RECONFIGURE_RUNNING = 0
    RECONFIGURE_STOPPED = 1

video_modes = gen.enum([gen.const("320x240",   int_t, 0, "QVGA"),
                        gen.const("640x480",   int_t, 1, "VGA"),
                        gen.const("752x480",   int_t, 2, "WVGA"),
                        gen.const("800x600",   int_t, 3, "SVGA"),
                        gen.const("1024x768",  int_t, 4, "XGA"),
                        gen.const("1280x1024", int_t, 5, "SXGA"),
                        gen.const("1600x1200", int_t, 6, "UXGA"),
                        gen.const("2048x1536", int_t, 7, "QXGA"),
                        gen.const("2592x1944", int_t, 8, "QSXGA"),
                        gen.const("3840x2748", int_t, 9, "WQUXGA"),],
                       "Resolution of camera image")

shutter_modes = gen.enum([gen.const("Rolling", int_t, 0, "Rolling (ERS)"),
                          gen.const("GlobalReset", int_t, 1, "Global Reset"),
                          gen.const("Global", int_t, 2, "Global"),],
                         "Shutter mode")

measure_field_aes = gen.enum([gen.const("30", int_t, 0, "30%"),
                              gen.const("60", int_t, 1, "60%"),
                              gen.const("100", int_t, 2, "100%")],
                             "Measure Field AE")

# variable type level description default min max

gen.add("video_mode", int_t, SensorLevels.RECONFIGURE_STOPPED, "Video mode", 1, edit_method=video_modes)
gen.add("shutter", int_t, SensorLevels.RECONFIGURE_RUNNING, "Shutter Mode", 2, edit_method=shutter_modes)
gen.add("measure_field_ae", int_t, SensorLevels.RECONFIGURE_RUNNING, "measure field for auto exposure", 2, edit_method=measure_field_aes)
gen.add("exposure_time", double_t, SensorLevels.RECONFIGURE_RUNNING, "Exposure [ms]", 48.5, 0.257778, 1153.416)
gen.add("exposure_target", int_t, SensorLevels.RECONFIGURE_RUNNING, "Exposure Target [ms]", 30, 5, 64)
gen.add("brightness", int_t, SensorLevels.RECONFIGURE_RUNNING, "Brightness", 128, 0, 255)
gen.add("contrast", int_t, SensorLevels.RECONFIGURE_RUNNING, "Contrast", 256, 0, 512)
gen.add("gamma", int_t, SensorLevels.RECONFIGURE_RUNNING, "Gamma", 64, 5, 128)
gen.add("gain", int_t, SensorLevels.RECONFIGURE_RUNNING, "Gain", 6, 0, 60)
gen.add("white_balance", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Adjust White Balance", False)
gen.add("red", int_t, SensorLevels.RECONFIGURE_RUNNING, "Red", 143, 0, 512)
gen.add("green", int_t, SensorLevels.RECONFIGURE_RUNNING, "Green", 128, 0, 512)
gen.add("blue", int_t, SensorLevels.RECONFIGURE_RUNNING, "Blue", 237, 0, 512)
gen.add("blacklevel", int_t, SensorLevels.RECONFIGURE_RUNNING, "Sensor BlackLevel", 128, 0, 256)
gen.add("pll", int_t, SensorLevels.RECONFIGURE_RUNNING, "phase-locked loop oscillator", 10, 0, 100)
gen.add("strobe_length", int_t, SensorLevels.RECONFIGURE_RUNNING, "length of strobe pulse output (msec)", 10, 0, 1000)
gen.add("strobe_delay", int_t, SensorLevels.RECONFIGURE_RUNNING, "delay before strobe pulse is executed (msec)", 10, 0, 1000)
gen.add("trigger_delay", int_t, SensorLevels.RECONFIGURE_RUNNING, "delay before hardware trigger is executed (msec)", 10, 0, 1000)

#gen.add("color", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Color Processing", True)
gen.add("flipped_v", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Flip Vertically", False)
gen.add("flipped_h", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Flip Horizontally", False)
#gen.add("invert_pixel", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Invert Pixel (BW Only)", False)
#gen.add("defect_cor", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Defect Pixel Correction", False)
#gen.add("sw_trig_mode", bool_t, SensorLevels.RECONFIGURE_RUNNING, "DELAYED_TRIGGER_RETURN (False) || IMMEDIATE_TRIGGER_RETURN", False)
#gen.add("callback_br_frames", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Broken frames also triggering the callback function", False)
gen.add("reset", bool_t, SensorLevels.RECONFIGURE_RUNNING, "Reset all Parameters to Default", False)

exit(gen.generate(PKG, "netusb_camera_driver", "NETUSBCamera"))
